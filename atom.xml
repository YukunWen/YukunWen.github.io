<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hey, you find me!</title>
  
  <subtitle>Yk&#39;s Home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-27T03:48:12.283Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yukun Wen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&quot;生成QR二维码&quot;</title>
    <link href="http://yoursite.com/2018/10/27/java%E7%94%9F%E6%88%90QR%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>http://yoursite.com/2018/10/27/java生成QR二维码/</id>
    <published>2018-10-27T03:44:29.000Z</published>
    <updated>2018-10-27T03:48:12.283Z</updated>
    
    <content type="html"><![CDATA[<p>####引言<br>   随着二维码（QR code）的普及，越来越多的项目中会设计一些产生二维码的交互页面，以便更好地和用户互动，以及方便用户的使用，传播app等操作。那么今天就来探究一下如何在项目中快速简单的生成QR二维码。</p><p>##一.简易版本</p><p>###首先<br>我们用到谷歌开源的zxing项目包，使用maven的同学可以轻易的导入。</p><pre><code>       &lt;!--QRcode--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;            &lt;artifactId&gt;core&lt;/artifactId&gt;            &lt;version&gt;3.1.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;            &lt;artifactId&gt;javase&lt;/artifactId&gt;            &lt;version&gt;3.1.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--QRcode--&gt;</code></pre><a id="more"></a><p>###第二步<br>我们来编写生成简单二维码的java代码。只要有一个content的输入，能把content的内容藏到二维码中即可。那么代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QRCodeUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CHARSET <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 二维码尺寸</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> QRCODE_SIZE <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> BufferedImage <span class="token function">createImage</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hashtable<span class="token operator">&lt;</span>EncodeHintType<span class="token punctuation">,</span> Object<span class="token operator">></span> hints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span>EncodeHintType<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>EncodeHintType<span class="token punctuation">.</span>ERROR_CORRECTION<span class="token punctuation">,</span> ErrorCorrectionLevel<span class="token punctuation">.</span>H<span class="token punctuation">)</span><span class="token punctuation">;</span>        hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>EncodeHintType<span class="token punctuation">.</span>CHARACTER_SET<span class="token punctuation">,</span> CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>EncodeHintType<span class="token punctuation">.</span>MARGIN<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BitMatrix bitMatrix <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            bitMatrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiFormatWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> BarcodeFormat<span class="token punctuation">.</span>QR_CODE<span class="token punctuation">,</span> QRCODE_SIZE<span class="token punctuation">,</span> QRCODE_SIZE<span class="token punctuation">,</span>                    hints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WriterException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> bitMatrix<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> bitMatrix<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedImage image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                image<span class="token punctuation">.</span><span class="token function">setRGB</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> bitMatrix<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0xFF000000</span> <span class="token operator">:</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> image<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面我们编写controller接口去进行测试</p><blockquote><p><strong>注意</strong>：对于有些二维码是扫了即用，扫完即走那种的，这个时候就不应该产生本地的缓存暂用服务器资源。禁止缓存的方式详见代码。<br><code>`</code>java<br>@Controller<br>@RequestMapping(“/qr”)<br>@Slf4j<br>public class QRController {</p></blockquote><pre><code>@GetMapping(value = &quot;/generate&quot;)@ResponseBodypublic void generateQR(@RequestParam(&quot;content&quot;)String content, HttpServletResponse response) {    BufferedImage image;    // 禁止图像缓存    response.setHeader(&quot;Pragma&quot;, &quot;No-cache&quot;);    response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);    response.setDateHeader(&quot;Expires&quot;, 0);    response.setContentType(&quot;image/jpeg&quot;);    image = QRCodeUtil.createImage(content);    // 创建二进制的输出流    try(ServletOutputStream sos = response.getOutputStream()){        // 将图像输出到Servlet输出流中。        ImageIO.write(image, &quot;jpeg&quot;, sos);    } catch (IOException e) {        e.printStackTrace();    }}</code></pre><p>}</p><pre><code>###结果最终效果如下图1所示：![图1.简易版本QR码生成图](https://upload-images.jianshu.io/upload_images/14043408-d97d2b4718eeb260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)##二.拓展版本在实际中，我们常常会看见一些二维码中间会放置上企业的logo，显得更加的美观专业。接下来我们就如何在二维码中间增加图案进行说明。###首先我们考虑增加两个变量，一个是插入图片的地址，一个压缩参数（主要用于过大logo情况下是否压缩）```java   // LOGO宽度    private static final int LOGO_WIDTH = 80;    // LOGO高度    private static final int LOGO_HEIGHT = 80;    /**     * 插入LOGO     *     * @param source       二维码图片     * @param logoPath     LOGO图片地址     * @param needCompress 是否压缩     * @throws Exception     */    public static void insertImage(BufferedImage source, InputStream logoPath, boolean needCompress)  {        Image src = null;        try {            src = ImageIO.read(logoPath);        } catch (IOException e) {            e.printStackTrace();        }        int width = src.getWidth(null);        int height = src.getHeight(null);        if (needCompress) {            // 压缩LOGO            if (width &gt; LOGO_WIDTH) {                width = LOGO_WIDTH;            }            if (height &gt; LOGO_HEIGHT) {                height = LOGO_HEIGHT;            }            Image image = src.getScaledInstance(width, height, Image.SCALE_SMOOTH);            BufferedImage tag = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);            Graphics g = tag.getGraphics();            // 绘制缩小后的图            g.drawImage(image, 0, 0, null);            g.dispose();            src = image;        }        // 插入LOGO        Graphics2D graph = source.createGraphics();        int x = (QRCODE_SIZE - width) / 2;        int y = (QRCODE_SIZE - height) / 2;        graph.drawImage(src, x, y, width, height, null);        Shape shape = new RoundRectangle2D.Float(x, y, width, width, 12, 12);        graph.setStroke(new BasicStroke(3f));        graph.draw(shape);        graph.dispose();    }</code></pre><p>我们只要在一中生成图片的基础上调用该方法，即可在里面插入一个Logo。</p><p>###接着<br>我们照样编写了controller去测试：<br><img src="https://upload-images.jianshu.io/upload_images/14043408-a4bc18aa7a3e0d88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2.新增代码示意图"></p><p>###结果<br>最终我们就可以得到带有logo的二维码了，如下图3所示：<br><img src="https://upload-images.jianshu.io/upload_images/14043408-6c76d629f6fb91d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3.拓展版本QR码生成图"></p><p>##三.总结<br>有了谷歌的帮助，我们生成二维码是非常简单的一件事情。最后，博主有几点想提醒读者：</p><ol><li>二维码的原理主要是依靠斜左上方的三个矩形框来进行定位，然后解析图片的黑白像素对应计算机编码的01操作。那么如果是二维码里面藏的东西过多的时候，二维码可能会很丑陋，几个定位符非常的小，里面的黑白点非常的密集。这个时候不妨尝试一下利用缓存，二维码里面只藏有简单的随机字符串，然后再根据扫描得到的字符串去请求缓存拿到真正的有用信息。(这种就是<strong>代理</strong>的思想)</li><li>在第1点的基础上，有时候二维码就是为了做登陆的，要求极高的安全性。在二维码里面藏了一下检验，防串改的字串，比如jwtToken。那么这个二维码很有可能会非常丑，遇到了不懂技术的产品，可能要你改需求。低效的沟通还不如直接拿巨头的成本给他看，直接拿微信公众平台(<a href="https://mp.weixin.qq.com/)的登陆页面二维码给他看，让对方明白**为了安全有的时候不得不牺牲美观**。" target="_blank" rel="noopener">https://mp.weixin.qq.com/)的登陆页面二维码给他看，让对方明白**为了安全有的时候不得不牺牲美观**。</a><br><img src="https://upload-images.jianshu.io/upload_images/14043408-65d3375bfacb8b26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信公众平台登陆页面二维码.png"><br>3.关于中间藏匿的logo，读者可能需要根据logo的大小和二维码的复杂程度去自行调节一下。觉得本文写得还行的读者可以扫描文中postman生成的二维码关注我的github。</li></ol><p>本文内容代码均放置到了github上，需要的读者自行获取：</p><blockquote><p><a href="https://github.com/YukunWen/QRdemo" target="_blank" rel="noopener">https://github.com/YukunWen/QRdemo</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####引言&lt;br&gt;   随着二维码（QR code）的普及，越来越多的项目中会设计一些产生二维码的交互页面，以便更好地和用户互动，以及方便用户的使用，传播app等操作。那么今天就来探究一下如何在项目中快速简单的生成QR二维码。&lt;/p&gt;
&lt;p&gt;##一.简易版本&lt;/p&gt;
&lt;p&gt;###首先&lt;br&gt;我们用到谷歌开源的zxing项目包，使用maven的同学可以轻易的导入。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       &amp;lt;!--QRcode--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.google.zxing&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.google.zxing&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javase&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--QRcode--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>&quot;自定义配置文件properties与Spring boot源码启动配置文件分析（三）&quot;</title>
    <link href="http://yoursite.com/2018/10/21/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6properties%E4%B8%8ESpring%20boot%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/21/自定义配置文件properties与Spring boot源码启动配置文件分析（三）/</id>
    <published>2018-10-21T14:32:29.000Z</published>
    <updated>2018-10-21T14:56:26.952Z</updated>
    
    <content type="html"><![CDATA[<p>在一二中我们分别分析了自定义的配置文件和springboot配置文件如何启动的。接下来我们就对文件启动的顺序进行一个探究。</p><h2 id="三、配置文件优先级读取分析"><a href="#三、配置文件优先级读取分析" class="headerlink" title="三、配置文件优先级读取分析"></a>三、配置文件优先级读取分析</h2><h3 id="1-同为默认配置文件，读取顺序"><a href="#1-同为默认配置文件，读取顺序" class="headerlink" title="1.同为默认配置文件，读取顺序"></a>1.同为默认配置文件，读取顺序</h3><p>在二中我们还记得，其中的变量为：</p><blockquote><p> private static final String DEFAULT_SEARCH_LOCATIONS = “classpath:/,classpath:/config/,file:./,file:./config/“;  </p></blockquote><p>但是，代码中做了一个reverse的操作，即顺序应该是</p><blockquote><p>./config/application.properties,<br>./application.properties,<br>classpath:./config/application.properties,<br>classpath:./application.properties</p></blockquote><a id="more"></a><p>用图更能说明问题，详见图1。<br><img src="https://upload-images.jianshu.io/upload_images/14043408-c53db6e9482c12ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1. 默认配置文件启动顺序图"></p><h3 id="2-同为自定义配置文件"><a href="#2-同为自定义配置文件" class="headerlink" title="2.同为自定义配置文件"></a>2.同为自定义配置文件</h3><blockquote><p>启动顺序是：启动哪个模块(一般为web模块)就以哪个模块的优先。</p></blockquote><p>但是其余模块顺序未知，很有可能跟module的设置顺序有关(<em>博主未曾实验过，只是一种猜测</em>)。但是，既然是自定义配置文件了，还是<strong>建议不要有同名的变量配置</strong>，以免给自己找麻烦。</p><h3 id="3-自定义配置文件和默认配置文件冲突"><a href="#3-自定义配置文件和默认配置文件冲突" class="headerlink" title="3.自定义配置文件和默认配置文件冲突"></a>3.自定义配置文件和默认配置文件冲突</h3><blockquote><p>这个时候的优先级是<strong>默认配置文件</strong>的优先级要跟高一些。</p></blockquote><p>换句话说，默认配置文件会比自定义配置文件更加后启动。</p><h3 id="4-出现多个默认的配置文件"><a href="#4-出现多个默认的配置文件" class="headerlink" title="4.出现多个默认的配置文件"></a>4.出现多个默认的配置文件</h3><p>根据二中的分析，我们知道系统只会找到一份默认的配置文件，就会停止搜索。那么会先搜索哪个模块下面的配置文件。</p><blockquote><p>还是跟第2点一样，会先搜索启动项目的模块，再去找其他模块。</p></blockquote><p>对于其他模块的搜索顺序，还是未确定数。有兴趣的读者可以自行分析一下源码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一二中我们分别分析了自定义的配置文件和springboot配置文件如何启动的。接下来我们就对文件启动的顺序进行一个探究。&lt;/p&gt;
&lt;h2 id=&quot;三、配置文件优先级读取分析&quot;&gt;&lt;a href=&quot;#三、配置文件优先级读取分析&quot; class=&quot;headerlink&quot; title=&quot;三、配置文件优先级读取分析&quot;&gt;&lt;/a&gt;三、配置文件优先级读取分析&lt;/h2&gt;&lt;h3 id=&quot;1-同为默认配置文件，读取顺序&quot;&gt;&lt;a href=&quot;#1-同为默认配置文件，读取顺序&quot; class=&quot;headerlink&quot; title=&quot;1.同为默认配置文件，读取顺序&quot;&gt;&lt;/a&gt;1.同为默认配置文件，读取顺序&lt;/h3&gt;&lt;p&gt;在二中我们还记得，其中的变量为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; private static final String DEFAULT_SEARCH_LOCATIONS = “classpath:/,classpath:/config/,file:./,file:./config/“;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，代码中做了一个reverse的操作，即顺序应该是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./config/application.properties,&lt;br&gt;./application.properties,&lt;br&gt;classpath:./config/application.properties,&lt;br&gt;classpath:./application.properties&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>&quot;自定义配置文件properties与Spring boot源码启动配置文件分析（二）&quot;</title>
    <link href="http://yoursite.com/2018/10/21/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6properties%E4%B8%8ESpring%20boot%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/21/自定义配置文件properties与Spring boot源码启动配置文件分析（二）/</id>
    <published>2018-10-21T14:22:29.000Z</published>
    <updated>2018-10-21T14:55:12.001Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/b325f9ba75bd" target="_blank" rel="noopener">上一篇文章</a>说完了自定义配置文件properties的写法，并且介绍了采用classpath*通配模式下读取多个同名文件的内容方法。<br>下面就要进入到对springboot的默认配置文件application.properties的分析了。</p><h2 id="二、springboot读取默认配置文件深入探究"><a href="#二、springboot读取默认配置文件深入探究" class="headerlink" title="二、springboot读取默认配置文件深入探究"></a>二、springboot读取默认配置文件深入探究</h2><h3 id="1-springboot启动用运行"><a href="#1-springboot启动用运行" class="headerlink" title="1.springboot启动用运行"></a>1.springboot启动用运行</h3><p>通过run里面跟踪下去，会执行到ConfigurableApplicationContext run(String… args)里面，在里面初始化sprignboot的上下文配置。它的listern（ConfigFileApplicationListener）会对它的执行进行监听。<br>ConfigFileApplicationListener里面存在一些static变量，我们先来看一下他们,后面都会用到。<br>注意下面的 DEFAULT_SEARCH_LOCATIONS ，都是采用classpath:的模式，并没有带*</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigFileApplicationListener</span>        <span class="token keyword">implements</span> <span class="token class-name">EnvironmentPostProcessor</span><span class="token punctuation">,</span> SmartApplicationListener<span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PROPERTIES <span class="token operator">=</span> <span class="token string">"defaultProperties"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Note the order is from least to most specific (last one wins)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SEARCH_LOCATIONS <span class="token operator">=</span> <span class="token string">"classpath:/,classpath:/config/,file:./,file:./config/"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_NAMES <span class="token operator">=</span> <span class="token string">"application"</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * The "config location" property name.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIG_LOCATION_PROPERTY <span class="token operator">=</span> <span class="token string">"spring.config.location"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The "config additional location" property name.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONFIG_ADDITIONAL_LOCATION_PROPERTY <span class="token operator">=</span> <span class="token string">"spring.config.additional-location"</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><a id="more"></a><p>调用到ConfigFileApplicationListener 里面的<br>addLoadedPropertySources(ConfigurableEnvironment environment,ResourceLoader resourceLoader)，该方法内部会初始化Loader对象，调用load()函数。<br>下面进入正文——我们来详细看一下load()函数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>profiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>processedProfiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>activatedProfiles <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">initializeProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Profile profile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>profile <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>profile<span class="token punctuation">.</span><span class="token function">isDefaultProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">addProfileToEnvironment</span><span class="token punctuation">(</span>profile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">load</span><span class="token punctuation">(</span>profile<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>getPositiveProfileFilter<span class="token punctuation">,</span>                        <span class="token function">addToLoaded</span><span class="token punctuation">(</span>MutablePropertySources<span class="token operator">:</span><span class="token operator">:</span>addLast<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>processedProfiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">load</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>getNegativeProfileFilter<span class="token punctuation">,</span>                    <span class="token function">addToLoaded</span><span class="token punctuation">(</span>MutablePropertySources<span class="token operator">:</span><span class="token operator">:</span>addFirst<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addLoadedPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>可以发现里面profiles.poll()一开始为空，所以会调用<br> load(profile, this::getPositiveProfileFilter,<br>                        addToLoaded(MutablePropertySources::addLast, false));</p><h3 id="2-真正读取的地方"><a href="#2-真正读取的地方" class="headerlink" title="2.真正读取的地方"></a>2.真正读取的地方</h3><p>首先来看一下load源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>Profile profile<span class="token punctuation">,</span> DocumentFilterFactory filterFactory<span class="token punctuation">,</span>                DocumentConsumer consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getSearchLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> isFolder <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Set<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> isFolder <span class="token operator">?</span> <span class="token function">getSearchNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> NO_SEARCH_NAMES<span class="token punctuation">;</span>                names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>                        <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> name<span class="token punctuation">,</span> profile<span class="token punctuation">,</span> filterFactory<span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="3-先调用getSearchLocations-方法"><a href="#3-先调用getSearchLocations-方法" class="headerlink" title="3. 先调用getSearchLocations()方法"></a>3. 先调用getSearchLocations()方法</h3><p>接着相应的搜索地方调用查找位置，除非配置了spring.config.location</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getSearchLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">containsProperty</span><span class="token punctuation">(</span>CONFIG_LOCATION_PROPERTY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">getSearchLocations</span><span class="token punctuation">(</span>CONFIG_LOCATION_PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> locations <span class="token operator">=</span> <span class="token function">getSearchLocations</span><span class="token punctuation">(</span>                    CONFIG_ADDITIONAL_LOCATION_PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>            locations<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>                    <span class="token function">asResolvedSet</span><span class="token punctuation">(</span>ConfigFileApplicationListener<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>searchLocations<span class="token punctuation">,</span>                            DEFAULT_SEARCH_LOCATIONS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> locations<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="3-1继续进入其中的asResolvedSet-方法"><a href="#3-1继续进入其中的asResolvedSet-方法" class="headerlink" title="3.1继续进入其中的asResolvedSet()方法"></a>3.1继续进入其中的asResolvedSet()方法</h4><p>这里面做了一个reverse操作</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">asResolvedSet</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> String fallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">trimArrayElements</span><span class="token punctuation">(</span>                    StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span>                            <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> fallback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="4-接着我们来看-getSearchNames-方法"><a href="#4-接着我们来看-getSearchNames-方法" class="headerlink" title="4. 接着我们来看 getSearchNames()方法"></a>4. 接着我们来看 getSearchNames()方法</h3><p>操作都差不多，大同小异，先看下有没有设置别名，没有的话就采用默认的application名称</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getSearchNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">containsProperty</span><span class="token punctuation">(</span>CONFIG_NAME_PROPERTY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String property <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>CONFIG_NAME_PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">asResolvedSet</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">asResolvedSet</span><span class="token punctuation">(</span>ConfigFileApplicationListener<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">,</span> DEFAULT_NAMES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="5-最后我们来看一下foreach里面的load方法"><a href="#5-最后我们来看一下foreach里面的load方法" class="headerlink" title="5. 最后我们来看一下foreach里面的load方法"></a>5. 最后我们来看一下foreach里面的load方法</h3><p>如果找得到name(即上面默认情况下的application，或者自定义名称)的情况下，就进行相应的配置文件的读取</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>String location<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Profile profile<span class="token punctuation">,</span>                DocumentFilterFactory filterFactory<span class="token punctuation">,</span> DocumentConsumer consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertySourceLoader loader <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceLoaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canLoadFileExtension</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">load</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> location<span class="token punctuation">,</span> profile<span class="token punctuation">,</span>                                filterFactory<span class="token punctuation">.</span><span class="token function">getDocumentFilter</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertySourceLoader loader <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceLoaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String fileExtension <span class="token operator">:</span> loader<span class="token punctuation">.</span><span class="token function">getFileExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>processed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fileExtension<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">loadForFileExtension</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> location <span class="token operator">+</span> name<span class="token punctuation">,</span> <span class="token string">"."</span> <span class="token operator">+</span> fileExtension<span class="token punctuation">,</span>                                profile<span class="token punctuation">,</span> filterFactory<span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="5-1-继续进入第一个if的load-方法"><a href="#5-1-继续进入第一个if的load-方法" class="headerlink" title="5.1 继续进入第一个if的load()方法"></a>5.1 继续进入第一个if的load()方法</h4><p>别看这段代码长，实际上就是try里面的第一句有用，后面都是一些情况判断</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>PropertySourceLoader loader<span class="token punctuation">,</span> String location<span class="token punctuation">,</span> Profile profile<span class="token punctuation">,</span>                DocumentFilter filter<span class="token punctuation">,</span> DocumentConsumer consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Resource resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Skipped missing config "</span>                                <span class="token operator">+</span> <span class="token function">getDescription</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> profile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>                        StringUtils<span class="token punctuation">.</span><span class="token function">getFilenameExtension</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Skipped empty config extension "</span>                                <span class="token operator">+</span> <span class="token function">getDescription</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> profile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                String name <span class="token operator">=</span> <span class="token string">"applicationConfig: ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>Document<span class="token operator">></span> documents <span class="token operator">=</span> <span class="token function">loadDocuments</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> name<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>documents<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Skipped unloaded config "</span>                                <span class="token operator">+</span> <span class="token function">getDescription</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> profile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                List<span class="token operator">&lt;</span>Document<span class="token operator">></span> loaded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Document document <span class="token operator">:</span> documents<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">addActiveProfiles</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getActiveProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">addIncludedProfiles</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getIncludeProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        loaded<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>loaded<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loaded<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    loaded<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>profile<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Loaded config file "</span>                                <span class="token operator">+</span> <span class="token function">getDescription</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> profile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Failed to load property "</span>                        <span class="token operator">+</span> <span class="token string">"source from location '"</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="5-2-与自定义配置文件相连"><a href="#5-2-与自定义配置文件相连" class="headerlink" title="5.2 与自定义配置文件相连"></a>5.2 与自定义配置文件相连</h4><p>自此，就和前面的给串联起来了。getResource因为不是classpath*模式，所以会走到上面代码的最后一个else</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// a single resource with the given name</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>而getResourceLoader().getResource(locationPattern)最后返回的是一个Resource对象，所以对于Resource[]中只会有一个对象存在。</p><h4 id="5-3我们在进一步查看它的实现类"><a href="#5-3我们在进一步查看它的实现类" class="headerlink" title="5.3我们在进一步查看它的实现类"></a>5.3我们在进一步查看它的实现类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Pseudo URL prefix for loading from the class path: "classpath:" */</span>    String CLASSPATH_URL_PREFIX <span class="token operator">=</span> ResourceUtils<span class="token punctuation">.</span>CLASSPATH_URL_PREFIX<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Return a Resource handle for the specified resource location.     * &lt;p>The handle should always be a reusable resource descriptor,     * allowing for multiple {@link Resource#getInputStream()} calls.     * &lt;p>&lt;ul>     * &lt;li>Must support fully qualified URLs, e.g. "file:C:/test.dat".     * &lt;li>Must support classpath pseudo-URLs, e.g. "classpath:test.dat".     * &lt;li>Should support relative file paths, e.g. "WEB-INF/test.dat".     * (This will be implementation-specific, typically provided by an     * ApplicationContext implementation.)     * &lt;/ul>     * &lt;p>Note that a Resource handle does not imply an existing resource;     * you need to invoke {@link Resource#exists} to check for existence.     * @param location the resource location     * @return a corresponding Resource handle (never {@code null})     * @see #CLASSPATH_URL_PREFIX     * @see Resource#exists()     * @see Resource#getInputStream()     */</span>    Resource <span class="token function">getResource</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>进一步看它的实现类，如果是for循环里面找到一个值，就会返回</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Resource <span class="token function">getResource</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token string">"Location must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ProtocolResolver protocolResolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>protocolResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Resource resource <span class="token operator">=</span> protocolResolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> resource<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getResourceByPath</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>CLASSPATH_URL_PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>CLASSPATH_URL_PREFIX<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Try to parse the location as a URL...</span>                URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>ResourceUtils<span class="token punctuation">.</span><span class="token function">isFileURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FileUrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">UrlResource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// No URL -> resolve as resource path.</span>                <span class="token keyword">return</span> <span class="token function">getResourceByPath</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ClassPathResource</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"Path must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String pathToUse <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">cleanPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pathToUse<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pathToUse <span class="token operator">=</span> pathToUse<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> pathToUse<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classLoader <span class="token operator">=</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> null <span class="token operator">?</span> classLoader <span class="token operator">:</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getDefaultClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="6-当读取完后会回到-1-下面的执行最后的加载参数"><a href="#6-当读取完后会回到-1-下面的执行最后的加载参数" class="headerlink" title="6. 当读取完后会回到 1 下面的执行最后的加载参数"></a>6. 当读取完后会回到 1 下面的执行最后的加载参数</h3><blockquote><p>addLoadedPropertySources();</p></blockquote><p><strong>总结</strong>:对于classpath<em>模式会全局查找多处结果合并，而classpath只要找到一个就停止了。所以采用默认模块下面的配置文件，application.properties，在单项目多模块下，记得要在web模块（即启动模块）下放置**</em>一个**就好了。这样一方面便于管理，一方面也不会出现重复覆盖的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/b325f9ba75bd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇文章&lt;/a&gt;说完了自定义配置文件properties的写法，并且介绍了采用classpath*通配模式下读取多个同名文件的内容方法。&lt;br&gt;下面就要进入到对springboot的默认配置文件application.properties的分析了。&lt;/p&gt;
&lt;h2 id=&quot;二、springboot读取默认配置文件深入探究&quot;&gt;&lt;a href=&quot;#二、springboot读取默认配置文件深入探究&quot; class=&quot;headerlink&quot; title=&quot;二、springboot读取默认配置文件深入探究&quot;&gt;&lt;/a&gt;二、springboot读取默认配置文件深入探究&lt;/h2&gt;&lt;h3 id=&quot;1-springboot启动用运行&quot;&gt;&lt;a href=&quot;#1-springboot启动用运行&quot; class=&quot;headerlink&quot; title=&quot;1.springboot启动用运行&quot;&gt;&lt;/a&gt;1.springboot启动用运行&lt;/h3&gt;&lt;p&gt;通过run里面跟踪下去，会执行到ConfigurableApplicationContext run(String… args)里面，在里面初始化sprignboot的上下文配置。它的listern（ConfigFileApplicationListener）会对它的执行进行监听。&lt;br&gt;ConfigFileApplicationListener里面存在一些static变量，我们先来看一下他们,后面都会用到。&lt;br&gt;注意下面的 DEFAULT_SEARCH_LOCATIONS ，都是采用classpath:的模式，并没有带*&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class ConfigFileApplicationListener
        implements EnvironmentPostProcessor, SmartApplicationListener, Ordered {

    private static final String DEFAULT_PROPERTIES = &amp;quot;defaultProperties&amp;quot;;

    // Note the order is from least to most specific (last one wins)
    private static final String DEFAULT_SEARCH_LOCATIONS = &amp;quot;classpath:/,classpath:/config/,file:./,file:./config/&amp;quot;;

    private static final String DEFAULT_NAMES = &amp;quot;application&amp;quot;;

...
    /**
     * The &amp;quot;config location&amp;quot; property name.
     */
    public static final String CONFIG_LOCATION_PROPERTY = &amp;quot;spring.config.location&amp;quot;;

    /**
     * The &amp;quot;config additional location&amp;quot; property name.
     */
    public static final String CONFIG_ADDITIONAL_LOCATION_PROPERTY = &amp;quot;spring.config.additional-location&amp;quot;;
...
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>&quot;自定义配置文件properties与Spring boot源码启动配置文件分析（一）&quot;</title>
    <link href="http://yoursite.com/2018/10/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6properties%E4%B8%8ESpring%20boot%E6%BA%90%E7%A0%81%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/20/自定义配置文件properties与Spring boot源码启动配置文件分析（一）/</id>
    <published>2018-10-20T13:57:29.000Z</published>
    <updated>2018-10-21T15:00:41.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>springboot项目默认启动的是application.properties文件。在实际的开发中，一个项目中会含有多个模块，每个模块下面可能都含有一个或多个默认的配置信息。另外，有的工程中可能会需要引入额外的自定义配置文件。由此，引出三个问题：</p><p><strong>1. 自定义配置文件如何书写？</strong><br><strong>2. 默认的配置文件启动的顺序与读取？</strong><br><strong>3. 自定义配置文件与默认配置文件发生冲突的时候谁的优先级更高？</strong></p><p>下面我们将仔细的分析三个问题的实现与原理</p><h2 id="一、自定义配置文件"><a href="#一、自定义配置文件" class="headerlink" title="一、自定义配置文件"></a>一、自定义配置文件</h2><h3 id="1-1自定义配置文件书写"><a href="#1-1自定义配置文件书写" class="headerlink" title="1.1自定义配置文件书写"></a>1.1自定义配置文件书写</h3><p>先上例子，整个项目的架构是parent下面多个模块，每个模块里面可能会有一些自定的参数，又不想集中全部写在application.properties中，这样会默认配置会显得繁琐，难以查找与修改。所以我们在不同的架构下会创建一个自定义的配置文件，名为fantuan.properties。<br><a id="more"></a><br><img src="https://upload-images.jianshu.io/upload_images/14043408-13d2835e1a38846d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1. 项目结构图"><br>对于这种额外自定义的配置，肯定要求多个模块下面都要生效。于是，源码要采用classpath*模式，具体代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FantuanPropertiesConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PropertySourcesPlaceholderConfigurer <span class="token function">propertySourcesPlaceholderConfigurer</span><span class="token punctuation">(</span>            ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath*:fantuan.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PropertyPlaceholder placeholder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyPlaceholder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayUtils<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span>        placeholder<span class="token punctuation">.</span><span class="token function">setResources</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> placeholder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyPlaceholder</span> <span class="token keyword">extends</span> <span class="token class-name">PropertySourcesPlaceholderConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token keyword">private</span> Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> resources<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadProperties</span><span class="token punctuation">(</span>Properties props<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PropertiesLoaderUtils<span class="token punctuation">.</span><span class="token function">fillProperties</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>让我们进一步来看一下springboot中的getResources()源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在spring-core-5.0.8的jar包下面的org.springframework.core.io.support 的 PathMatchingResourcePatternResolver 类</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getResources</span><span class="token punctuation">(</span>String locationPattern<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">,</span> <span class="token string">"Location pattern must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>locationPattern<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>CLASSPATH_ALL_URL_PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// a class path resource (multiple resources for same name possible)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPattern</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>CLASSPATH_ALL_URL_PREFIX<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// a class path resource pattern</span>                <span class="token keyword">return</span> <span class="token function">findPathMatchingResources</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// all class path resources with the given name</span>                <span class="token keyword">return</span> <span class="token function">findAllClassPathResources</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>CLASSPATH_ALL_URL_PREFIX<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Generally only look for a pattern after a prefix here,</span>            <span class="token comment" spellcheck="true">// and on Tomcat only after the "*/" separator for its "war:" protocol.</span>            <span class="token keyword">int</span> prefixEnd <span class="token operator">=</span> <span class="token punctuation">(</span>locationPattern<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"war:"</span><span class="token punctuation">)</span> <span class="token operator">?</span> locationPattern<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"*/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span>                    locationPattern<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPattern</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>prefixEnd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// a file pattern</span>                <span class="token keyword">return</span> <span class="token function">findPathMatchingResources</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// a single resource with the given name</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>其中CLASSPATH_ALL_URL_PREFIX为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResourcePatternResolver</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Pseudo URL prefix for all matching resources from the class path: "classpath*:"     * This differs from ResourceLoader's classpath URL prefix in that it     * retrieves all matching resources for a given name (e.g. "/beans.xml"),     * for example in the root of all deployed JAR files.     * @see org.springframework.core.io.ResourceLoader#CLASSPATH_URL_PREFIX     */</span>    String CLASSPATH_ALL_URL_PREFIX <span class="token operator">=</span> <span class="token string">"classpath*:"</span><span class="token punctuation">;</span>···<span class="token punctuation">}</span></code></pre><p>由此可见，只要是classpath*这样子的写法，就会是多匹配模式，即便是同名的也会多包含模式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;springboot项目默认启动的是application.properties文件。在实际的开发中，一个项目中会含有多个模块，每个模块下面可能都含有一个或多个默认的配置信息。另外，有的工程中可能会需要引入额外的自定义配置文件。由此，引出三个问题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 自定义配置文件如何书写？&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2. 默认的配置文件启动的顺序与读取？&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3. 自定义配置文件与默认配置文件发生冲突的时候谁的优先级更高？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面我们将仔细的分析三个问题的实现与原理&lt;/p&gt;
&lt;h2 id=&quot;一、自定义配置文件&quot;&gt;&lt;a href=&quot;#一、自定义配置文件&quot; class=&quot;headerlink&quot; title=&quot;一、自定义配置文件&quot;&gt;&lt;/a&gt;一、自定义配置文件&lt;/h2&gt;&lt;h3 id=&quot;1-1自定义配置文件书写&quot;&gt;&lt;a href=&quot;#1-1自定义配置文件书写&quot; class=&quot;headerlink&quot; title=&quot;1.1自定义配置文件书写&quot;&gt;&lt;/a&gt;1.1自定义配置文件书写&lt;/h3&gt;&lt;p&gt;先上例子，整个项目的架构是parent下面多个模块，每个模块里面可能会有一些自定的参数，又不想集中全部写在application.properties中，这样会默认配置会显得繁琐，难以查找与修改。所以我们在不同的架构下会创建一个自定义的配置文件，名为fantuan.properties。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>&quot;爬虫抓取重定向问题&quot;</title>
    <link href="http://yoursite.com/2018/10/20/%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96%E9%87%8D%E5%AE%9A%E5%90%91%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/20/爬虫抓取重定向问题/</id>
    <published>2018-10-20T02:24:29.000Z</published>
    <updated>2018-10-20T02:58:49.221Z</updated>
    
    <content type="html"><![CDATA[<p>在做爬虫中，我们经常会遇到<strong>重定向</strong>问题。比如之前做的秒拍的地址：</p><blockquote><p><a href="http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__.htm" target="_blank" rel="noopener">http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__.htm</a></p></blockquote><p>在重定向后就成为了：</p><blockquote><p><a href="http://n.miaopai.com/media/fnrDABcheGpX2nrnpts7J9KC5ZlnVZ~Z" target="_blank" rel="noopener">http://n.miaopai.com/media/fnrDABcheGpX2nrnpts7J9KC5ZlnVZ~Z</a></p></blockquote><p>从浏览器的network也可以看出来发生了一个重定向</p><p><img src="http://upload-images.jianshu.io/upload_images/14043408-71520da4af6e9d52?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p><h4 id="所以如果我们直接请求原地址，并且用页面解析方法（如jsoup等），就无法获取到相应的视频标题，视频源码地址等信息。"><a href="#所以如果我们直接请求原地址，并且用页面解析方法（如jsoup等），就无法获取到相应的视频标题，视频源码地址等信息。" class="headerlink" title="所以如果我们直接请求原地址，并且用页面解析方法（如jsoup等），就无法获取到相应的视频标题，视频源码地址等信息。"></a>所以如果我们直接请求原地址，并且用页面解析方法（如jsoup等），就无法获取到相应的视频标题，视频源码地址等信息。</h4><a id="more"></a><p>那么，就需要我们在该地址之前做一层<strong>302重定向</strong>到新的地址，根据新的地址就可以进行原有的解析工作。</p><ol><li>网上查到有一种简单的方法：  </li></ol><pre class=" language-java"><code class="language-java">        String url <span class="token operator">=</span> <span class="token string">"http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__.htm"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问地址:"</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        URL serverUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpURLConnection conn <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> serverUrl<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"*/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 必须设置false，否则会自动redirect到Location的地址</span>        conn<span class="token punctuation">.</span><span class="token function">setInstanceFollowRedirects</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取Location地址</span>        String location <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getHeaderField</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该方法在本地进行模拟还可以，但是不适用于在生产上。<br>实际生产中爬虫都是高频次的爬取，所以任何的访问都必须带上代理才行。<br>结合公司目前采用的是httpClient框架，于是给出如下demo代码。 </p><ol start="2"><li>含有代理的httpClient实现：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>URI<span class="token operator">></span> <span class="token function">doGetRedirectLocations</span><span class="token punctuation">(</span>HttpGet httpReq<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setHeaders</span><span class="token punctuation">(</span>httpReq<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpReq<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>reqConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpClientContext localContext <span class="token operator">=</span> <span class="token function">getProxyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>CloseableHttpResponse httpResp <span class="token operator">=</span> instance<span class="token punctuation">.</span>httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpReq<span class="token punctuation">,</span> localContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> localContext<span class="token punctuation">.</span><span class="token function">getRedirectLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> HttpClientContext <span class="token function">getProxyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AuthCache authCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicAuthCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>proxy<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BasicScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpClientContext localContext <span class="token operator">=</span> HttpClientContext<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localContext<span class="token punctuation">.</span><span class="token function">setAuthCache</span><span class="token punctuation">(</span>authCache<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> localContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>更进一步地，由于大型网站都会有防爬虫的机制，即便你采用了动态IP的代理，但是还是难免在抓取的过程中可能会弹出需要输入验证码，或者进行滑块滑动验证的时候。<br>于是，更进一步的代码如下。</p><ol start="3"><li>增加轮询的视频抓取：</li></ol><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>URI<span class="token operator">></span> <span class="token function">doGetRedirectLocations</span><span class="token punctuation">(</span>HttpGet httpReq<span class="token punctuation">,</span> <span class="token keyword">int</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retry <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"重试次数已经用完"</span> <span class="token operator">+</span> httpReq<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        HttpClientContext localContext <span class="token operator">=</span> <span class="token function">getProxyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>CloseableHttpResponse httpResp <span class="token operator">=</span> instance<span class="token punctuation">.</span>httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpReq<span class="token punctuation">,</span> localContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>URI<span class="token operator">></span> redirectLocations <span class="token operator">=</span> localContext<span class="token punctuation">.</span><span class="token function">getRedirectLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>redirectLocations <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> redirectLocations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> redirectLocations<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">doGetRedirectLocations</span><span class="token punctuation">(</span>httpReq<span class="token punctuation">,</span> retry <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>PS: 轮询有多重实现方式，初级工程师基本会使用for循环，那样的代码有时候冗余，可读性差。轮询最好用递归的方式，显得优雅。</p><p>至此，关于视频重定向的问题就这么解决了。最后顺口提及一句，在做爬虫解析过程中，我们发现了很多时候URL的尾部是非常不重要的。比如，本文章中的秒拍地址：</p><blockquote><p><a href="http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__.htm" target="_blank" rel="noopener">http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__.htm</a></p></blockquote><p>你就算是写成</p><blockquote><p><a href="http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__.html" target="_blank" rel="noopener">http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__.html</a></p></blockquote><p>或者</p><blockquote><p><a href="http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__" target="_blank" rel="noopener">http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__</a></p></blockquote><p>一样可以无差别访问，因此在做正则匹配的时候，切记考虑通配尾部。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做爬虫中，我们经常会遇到&lt;strong&gt;重定向&lt;/strong&gt;问题。比如之前做的秒拍的地址：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.miaopai.com/show/5bpIqSpDFRAvlgidhXSTKZkfSwWYpwaV5SI1ZA__.htm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在重定向后就成为了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://n.miaopai.com/media/fnrDABcheGpX2nrnpts7J9KC5ZlnVZ~Z&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://n.miaopai.com/media/fnrDABcheGpX2nrnpts7J9KC5ZlnVZ~Z&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从浏览器的network也可以看出来发生了一个重定向&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/14043408-71520da4af6e9d52?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图1&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;所以如果我们直接请求原地址，并且用页面解析方法（如jsoup等），就无法获取到相应的视频标题，视频源码地址等信息。&quot;&gt;&lt;a href=&quot;#所以如果我们直接请求原地址，并且用页面解析方法（如jsoup等），就无法获取到相应的视频标题，视频源码地址等信息。&quot; class=&quot;headerlink&quot; title=&quot;所以如果我们直接请求原地址，并且用页面解析方法（如jsoup等），就无法获取到相应的视频标题，视频源码地址等信息。&quot;&gt;&lt;/a&gt;所以如果我们直接请求原地址，并且用页面解析方法（如jsoup等），就无法获取到相应的视频标题，视频源码地址等信息。&lt;/h4&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>&quot;linux上发送邮件&quot;</title>
    <link href="http://yoursite.com/2018/10/14/linux%E4%B8%8A%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/10/14/linux上发送邮件/</id>
    <published>2018-10-14T03:26:37.000Z</published>
    <updated>2018-10-20T02:51:43.283Z</updated>
    
    <content type="html"><![CDATA[<p>####1.  首先需要安装mailx</p><blockquote><p>yum install mailx</p></blockquote><p>####2.  编辑配置文件</p><blockquote><p>vim /etc/mail.rc</p></blockquote><p>添加如下内容  </p><pre><code>//from：对方收到邮件时显示的发件人  set from=xxxx@qq.com  //smtp：指定第三方发邮件的smtp服务器地址  set smtp=smtp.qq.com  //smtp-auth-user：第三方发邮件的用户名  set smtp-auth-user=xx@qq.com  //smtp-auth-password：用户名对应的密码,有些邮箱填的是授权码  set smtp-auth-password=xxx  //smtp-auth：SMTP的认证方式，默认是login，也可以改成CRAM-MD5或PLAIN方式  set smtp-auth=login</code></pre><a id="more"></a><p>####3. 测试  </p><blockquote><p>mail -s “hello word” <a href="mailto:xxxx@qq.com" target="_blank" rel="noopener">xxxx@qq.com</a> &lt; /etc/passwd<br>echo “测试邮件” | mail -s “测试” <a href="mailto:xx@qq.com" target="_blank" rel="noopener">xx@qq.com</a></p></blockquote><ul><li><strong>另外注意</strong><br>smtp协议要求服务器25端口是开通的，如果是购买vultr服务器的，需要另外向供应方去申请端口。国外的防止垃圾邮件规则非常麻烦，作者在申请的时候就需要等待14天的考察期，没问题后才被开启。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####1.  首先需要安装mailx&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;yum install mailx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;####2.  编辑配置文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vim /etc/mail.rc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;添加如下内容  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//from：对方收到邮件时显示的发件人  
set from=xxxx@qq.com  
//smtp：指定第三方发邮件的smtp服务器地址  
set smtp=smtp.qq.com  
//smtp-auth-user：第三方发邮件的用户名  
set smtp-auth-user=xx@qq.com  
//smtp-auth-password：用户名对应的密码,有些邮箱填的是授权码  
set smtp-auth-password=xxx  
//smtp-auth：SMTP的认证方式，默认是login，也可以改成CRAM-MD5或PLAIN方式  
set smtp-auth=login
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
</feed>
